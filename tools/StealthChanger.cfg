# This file contains common pin mappings for the BIGTREETECH EBBSB
# Canbus board. To use this config, the firmware should be compiled for the
# RP2040 with "USB" or "CAN bus (on gpio4/gpio5)".
# The "EBB Can" micro-controller will be used to control the components on the nozzle.

# See docs/Config_Reference.md for a description of parameters.

[mcu EBBSB]
canbus_uuid: 1f8179a9995c

[temperature_sensor EBB_NTC]
sensor_type: Generic 3950
sensor_pin: EBBSB:gpio28

[adxl345]
cs_pin: EBBSB:gpio1
spi_software_sclk_pin: EBBSB:gpio2
spi_software_mosi_pin: EBBSB:gpio0
spi_software_miso_pin: EBBSB:gpio3
axes_map: z,-y,x

# [resonance_tester]
# probe_points: 100, 100, 20
# accel_chip: adxl345

[extruder]
step_pin: EBBSB:gpio18
dir_pin: !EBBSB:gpio19
enable_pin: !EBBSB:gpio17
heater_pin: EBBSB:gpio7
sensor_pin: EBBSB:gpio27

rotation_distance: 22.542877   #Bondtech 5mm Drive Gears
gear_ratio: 50:10
microsteps: 16
full_steps_per_rotation: 400    #200 for 1.8 degree, 400 for 0.9 degree
nozzle_diameter: 0.800
filament_diameter: 1.75

# Rapido: PT1000
# Bambu:  Generic 3950
sensor_type: Generic 3950


min_temp: 10
max_temp: 300
max_power: 1.0
min_extrude_temp: 170
pressure_advance: 0.035
pressure_advance_smooth_time: 0.040
max_extrude_only_distance: 250

[tmc2209 extruder]
uart_pin: EBBSB:gpio20

interpolate: false
run_current: 0.5
sense_resistor: 0.110
stealthchop_threshold: 0

[multi_fan T0_partfan]
pin: EBBSB:gpio13
kick_start_time: 0.5
off_below: 0.10


[heater_fan T0_hotend_fan]
pin: EBBSB:gpio14
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0

[gcode_macro T0]
variable_color: ""
gcode:
  SELECT_TOOL T=0

[neopixel sb_leds]
pin: EBBSB:gpio16

#change the tool numbers to the tool you are configuring, ie T0, T1, etc
[tool T0]
#change this too
tool_number: 0
#if this were T1, then this would be extruder1, etc
extruder: extruder
#Change T0_partfan to tool number
fan: multi_fan T0_partfan
gcode_x_offset: 0
gcode_y_offset: 0
gcode_z_offset: 0
params_type: 'sc'
#This is the path the tool change takes. Shouldn't have to change it. Unless
#you are using a custom dock
params_sc_path: [{'y':9.5 ,'z':8}, {'y':9.5, 'z':2}, {'y':5.5, 'z':0}, {'z':0, 'y':0, 'f':0.5}, {'z':-10, 'y':0}, {'z':-10, 'y':16}]
#These are build specific, its where the tool is sititng in it's dock.
params_park_x: 28
params_park_y: -71.0
params_park_z: 300
params_safe_y: 20.0
# For InputShaper run per tool and enter the frequency here
params_input_shaper_type_x: 'mzv'
params_input_shaper_freq_x: 52
params_input_shaper_damping_ratio_x: 0.01
params_input_shaper_type_y: 'mzv'
params_input_shaper_freq_y: 37.2
params_input_shaper_damping_ratio_y: 0.01


[tool_probe T0]
pin: ^EBBSB:gpio24
tool: 0
x_offset: 0 # X axis-sensor relative nozzle offset
y_offset: 0 # Y axis-sensor relative nozzle offset
z_offset: 0 # Z axis-sensor relative nozzle offset
# drop_first_result: True # enable is on danger-klipper
speed: 5.0
samples: 3
samples_result: median
sample_retract_dist: 2.0
samples_tolerance: 0.02
samples_tolerance_retries: 3
activate_gcode:
    {% set PROBE_TEMP = 150 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}

# [mmu_sensors]
# extruder_switch_pin: ^EBBSB:gpio24
# toolhead_switch_pin: ^EBBSB:gpio22